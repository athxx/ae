// Code generated by Prisma Client Rust. DO NOT EDIT
#![allow(unused, warnings)]

pub static DATAMODEL_STR: &'static str = include_str!("/home/dev/rust/ae/server/prisma/schema.prisma");
static DATABASE_STR: &'static str = "postgresql";
use ::prisma_client_rust::migrations::include_dir;
pub static MIGRATIONS_DIR: &::prisma_client_rust::migrations::include_dir::Dir =
    &::prisma_client_rust::migrations::include_dir::include_dir!("/home/dev/rust/ae/server/prisma/migrations");
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(url: &str) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().with_url(url.to_string()).build().await
}
pub mod user {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "User";
    pub mod uid {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "uid";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUid(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Uid(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Uid(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i64) -> T {
            UniqueWhereParam::UidEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Uid, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementUid(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementUid(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyUid(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideUid(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Uid(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Uid(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod name {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "name";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetName(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Name(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Name(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::NameEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Name, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Name(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Name(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod nickname {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "nickname";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNickname(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Nickname(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Nickname(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Nickname(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Nickname, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Nickname(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Nickname(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod realname {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "realname";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRealname(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Realname(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Realname(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Realname(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Realname, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Realname(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Realname(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod email {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "email";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetEmail(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Email(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Email(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::EmailEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Email, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Email(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Email(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod phone {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "phone";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPhone(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Phone(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Phone(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Phone(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Phone, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Phone(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Phone(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod bio {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "bio";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetBio(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Bio(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Bio(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Bio(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Bio, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Bio(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Bio(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod avatar {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "avatar";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetAvatar(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Avatar(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Avatar(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Avatar(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Avatar, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Avatar(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Avatar(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod state {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "state";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetState(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::State(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::State(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::State(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, State, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementState(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementState(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyState(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideState(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::State(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::State(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod created {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "created";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetCreated(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Created(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Created(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Created(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Created, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementCreated(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementCreated(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyCreated(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideCreated(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Created(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Created(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod updated {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "updated";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUpdated(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Updated(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Updated(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Updated(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Updated, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementUpdated(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementUpdated(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyUpdated(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideUpdated(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Updated(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Updated(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod deleted {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "deleted";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDeleted(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Deleted(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Deleted(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Deleted(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Deleted, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementDeleted(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementDeleted(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyDeleted(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideDeleted(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Deleted(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Deleted(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod geo_user {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "GeoUser";
        pub struct Fetch(pub geo_user::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<geo_user::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: geo_user::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: geo_user::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::GeoUser(v)
            }
        }
        pub fn fetch(params: Vec<geo_user::WhereParam>) -> Fetch {
            Fetch(geo_user::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<geo_user::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectGeoUser(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<geo_user::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<geo_user::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectGeoUser(params)
        }
        pub fn set(params: Vec<geo_user::UniqueWhereParam>) -> SetParam {
            SetParam::SetGeoUser(params)
        }
        pub fn some(value: Vec<geo_user::WhereParam>) -> WhereParam {
            WhereParam::GeoUserSome(value)
        }
        pub fn every(value: Vec<geo_user::WhereParam>) -> WhereParam {
            WhereParam::GeoUserEvery(value)
        }
        pub fn none(value: Vec<geo_user::WhereParam>) -> WhereParam {
            WhereParam::GeoUserNone(value)
        }
        pub enum Include {
            Select(geo_user::ManyArgs, Vec<geo_user::SelectParam>),
            Include(geo_user::ManyArgs, Vec<geo_user::IncludeParam>),
            Fetch(geo_user::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::GeoUser(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (args.to_graphql().0, selections.into_iter().map(|s| s.to_selection()).collect()),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = <geo_user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (args.to_graphql().0, <geo_user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(args: geo_user::ManyArgs, nested_selections: Vec<geo_user::SelectParam>) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(args: geo_user::ManyArgs, nested_selections: Vec<geo_user::IncludeParam>) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(geo_user::ManyArgs, Vec<geo_user::SelectParam>),
            Include(geo_user::ManyArgs, Vec<geo_user::IncludeParam>),
            Fetch(geo_user::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::GeoUser(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (args.to_graphql().0, selections.into_iter().map(|s| s.to_selection()).collect()),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (args.to_graphql().0, <geo_user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(args: geo_user::ManyArgs, nested_selections: Vec<geo_user::SelectParam>) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(args: geo_user::ManyArgs, nested_selections: Vec<geo_user::IncludeParam>) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub mod shop {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "Shop";
        pub struct Fetch(pub shop::ManyArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<shop::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
            pub fn order_by(mut self, param: shop::OrderByParam) -> Self {
                self.0 = self.0.order_by(param);
                self
            }
            pub fn skip(mut self, value: i64) -> Self {
                self.0 = self.0.skip(value);
                self
            }
            pub fn take(mut self, value: i64) -> Self {
                self.0 = self.0.take(value);
                self
            }
            pub fn cursor(mut self, value: shop::UniqueWhereParam) -> Self {
                self.0 = self.0.cursor(value.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::Shop(v)
            }
        }
        pub fn fetch(params: Vec<shop::WhereParam>) -> Fetch {
            Fetch(shop::ManyArgs::new(params))
        }
        pub struct Connect(pub Vec<shop::UniqueWhereParam>);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectShop(v)
            }
        }
        pub fn connect<T: From<Connect>>(params: Vec<shop::UniqueWhereParam>) -> T {
            Connect(params).into()
        }
        pub fn disconnect(params: Vec<shop::UniqueWhereParam>) -> SetParam {
            SetParam::DisconnectShop(params)
        }
        pub fn set(params: Vec<shop::UniqueWhereParam>) -> SetParam {
            SetParam::SetShop(params)
        }
        pub fn some(value: Vec<shop::WhereParam>) -> WhereParam {
            WhereParam::ShopSome(value)
        }
        pub fn every(value: Vec<shop::WhereParam>) -> WhereParam {
            WhereParam::ShopEvery(value)
        }
        pub fn none(value: Vec<shop::WhereParam>) -> WhereParam {
            WhereParam::ShopNone(value)
        }
        pub enum Include {
            Select(shop::ManyArgs, Vec<shop::SelectParam>),
            Include(shop::ManyArgs, Vec<shop::IncludeParam>),
            Fetch(shop::ManyArgs),
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Shop(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (args.to_graphql().0, selections.into_iter().map(|s| s.to_selection()).collect()),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = <shop::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (args.to_graphql().0, <shop::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(args: shop::ManyArgs, nested_selections: Vec<shop::SelectParam>) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(args: shop::ManyArgs, nested_selections: Vec<shop::IncludeParam>) -> Self {
                Self::Include(args, nested_selections)
            }
        }
        pub enum Select {
            Select(shop::ManyArgs, Vec<shop::SelectParam>),
            Include(shop::ManyArgs, Vec<shop::IncludeParam>),
            Fetch(shop::ManyArgs),
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Shop(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let (args, selections) = match self {
                    Self::Select(args, selections) => (args.to_graphql().0, selections.into_iter().map(|s| s.to_selection()).collect()),
                    Self::Include(args, selections) => (args.to_graphql().0, {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }),
                    Self::Fetch(args) => (args.to_graphql().0, <shop::Types as ::prisma_client_rust::ModelTypes>::scalar_selections()),
                };
                ::prisma_client_rust::Selection::new(NAME, None, args, selections)
            }
            pub fn select(args: shop::ManyArgs, nested_selections: Vec<shop::SelectParam>) -> Self {
                Self::Select(args, nested_selections)
            }
            pub fn include(args: shop::ManyArgs, nested_selections: Vec<shop::IncludeParam>) -> Self {
                Self::Include(args, nested_selections)
            }
        }
    }
    pub fn create(name: String, _params: Vec<SetParam>) -> (String, Vec<SetParam>) {
        (name, _params)
    }
    pub fn create_unchecked(name: String, _params: Vec<SetParam>) -> (String, Vec<SetParam>) {
        (name, _params)
    }
    #[macro_export]
    macro_rules ! _select_user { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: user :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: user :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: user :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: user :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { uid , name , nickname , realname , email , phone , bio , avatar , state , created , updated , deleted , geo_user , shop } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: user :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: user :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: user :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: user :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["uid" , "name" , "nickname" , "realname" , "email" , "phone" , "bio" , "avatar" , "state" , "created" , "updated" , "deleted" , "GeoUser" , "Shop"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: user :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; uid) => { i64 } ; (@ field_type ; name) => { String } ; (@ field_type ; nickname) => { String } ; (@ field_type ; realname) => { String } ; (@ field_type ; email) => { String } ; (@ field_type ; phone) => { String } ; (@ field_type ; bio) => { String } ; (@ field_type ; avatar) => { String } ; (@ field_type ; state) => { i32 } ; (@ field_type ; created) => { i64 } ; (@ field_type ; updated) => { i64 } ; (@ field_type ; deleted) => { i64 } ; (@ field_type ; geo_user : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < geo_user :: Data > } ; (@ field_type ; geo_user) => { Vec < crate :: prisma :: geo_user :: Data > } ; (@ field_type ; shop : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < shop :: Data > } ; (@ field_type ; shop) => { Vec < crate :: prisma :: shop :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "User" , available relations are "uid, name, nickname, realname, email, phone, bio, avatar, state, created, updated, deleted, geo_user, shop")) } ; (@ field_module ; geo_user : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: geo_user :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; shop : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: shop :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; uid) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: uid :: Select) } ; (@ selection_field_to_selection_param ; name) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: name :: Select) } ; (@ selection_field_to_selection_param ; nickname) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: nickname :: Select) } ; (@ selection_field_to_selection_param ; realname) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: realname :: Select) } ; (@ selection_field_to_selection_param ; email) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: email :: Select) } ; (@ selection_field_to_selection_param ; phone) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: phone :: Select) } ; (@ selection_field_to_selection_param ; bio) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: bio :: Select) } ; (@ selection_field_to_selection_param ; avatar) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: avatar :: Select) } ; (@ selection_field_to_selection_param ; state) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: state :: Select) } ; (@ selection_field_to_selection_param ; created) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: created :: Select) } ; (@ selection_field_to_selection_param ; updated) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: updated :: Select) } ; (@ selection_field_to_selection_param ; deleted) => { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: deleted :: Select) } ; (@ selection_field_to_selection_param ; geo_user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: geo_user :: Select :: $ selection_mode (crate :: prisma :: geo_user :: ManyArgs :: new (crate :: prisma :: geo_user :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: geo_user :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; geo_user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: geo_user :: Select :: Fetch (crate :: prisma :: geo_user :: ManyArgs :: new (crate :: prisma :: geo_user :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; shop $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: shop :: Select :: $ selection_mode (crate :: prisma :: shop :: ManyArgs :: new (crate :: prisma :: shop :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: shop :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; shop $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: user :: SelectParam > :: into (crate :: prisma :: user :: shop :: Select :: Fetch (crate :: prisma :: shop :: ManyArgs :: new (crate :: prisma :: shop :: select ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: user :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; uid) => { "uid" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; nickname) => { "nickname" } ; (@ field_serde_name ; realname) => { "realname" } ; (@ field_serde_name ; email) => { "email" } ; (@ field_serde_name ; phone) => { "phone" } ; (@ field_serde_name ; bio) => { "bio" } ; (@ field_serde_name ; avatar) => { "avatar" } ; (@ field_serde_name ; state) => { "state" } ; (@ field_serde_name ; created) => { "created" } ; (@ field_serde_name ; updated) => { "updated" } ; (@ field_serde_name ; deleted) => { "deleted" } ; (@ field_serde_name ; geo_user) => { "GeoUser" } ; (@ field_serde_name ; shop) => { "Shop" } ; }
    pub use _select_user as select;
    pub enum SelectParam {
        Uid(uid::Select),
        Name(name::Select),
        Nickname(nickname::Select),
        Realname(realname::Select),
        Email(email::Select),
        Phone(phone::Select),
        Bio(bio::Select),
        Avatar(avatar::Select),
        State(state::Select),
        Created(created::Select),
        Updated(updated::Select),
        Deleted(deleted::Select),
        GeoUser(geo_user::Select),
        Shop(shop::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Uid(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Nickname(data) => data.to_selection(),
                Self::Realname(data) => data.to_selection(),
                Self::Email(data) => data.to_selection(),
                Self::Phone(data) => data.to_selection(),
                Self::Bio(data) => data.to_selection(),
                Self::Avatar(data) => data.to_selection(),
                Self::State(data) => data.to_selection(),
                Self::Created(data) => data.to_selection(),
                Self::Updated(data) => data.to_selection(),
                Self::Deleted(data) => data.to_selection(),
                Self::GeoUser(data) => data.to_selection(),
                Self::Shop(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_user { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: user :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: user :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: user :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: user :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: user :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: user :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { geo_user , shop } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub uid : i64 , pub name : String , pub nickname : String , pub realname : String , pub email : String , pub phone : String , pub bio : String , pub avatar : String , pub state : i32 , pub created : i64 , pub updated : i64 , pub deleted : i64 , $ (pub $ field : crate :: prisma :: user :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (uid) , stringify ! (name) , stringify ! (nickname) , stringify ! (realname) , stringify ! (email) , stringify ! (phone) , stringify ! (bio) , stringify ! (avatar) , stringify ! (state) , stringify ! (created) , stringify ! (updated) , stringify ! (deleted)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: user :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: user :: uid :: NAME , & self . uid) ? ; state . serialize_field (crate :: prisma :: user :: name :: NAME , & self . name) ? ; state . serialize_field (crate :: prisma :: user :: nickname :: NAME , & self . nickname) ? ; state . serialize_field (crate :: prisma :: user :: realname :: NAME , & self . realname) ? ; state . serialize_field (crate :: prisma :: user :: email :: NAME , & self . email) ? ; state . serialize_field (crate :: prisma :: user :: phone :: NAME , & self . phone) ? ; state . serialize_field (crate :: prisma :: user :: bio :: NAME , & self . bio) ? ; state . serialize_field (crate :: prisma :: user :: avatar :: NAME , & self . avatar) ? ; state . serialize_field (crate :: prisma :: user :: state :: NAME , & self . state) ? ; state . serialize_field (crate :: prisma :: user :: created :: NAME , & self . created) ? ; state . serialize_field (crate :: prisma :: user :: updated :: NAME , & self . updated) ? ; state . serialize_field (crate :: prisma :: user :: deleted :: NAME , & self . deleted) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , uid , name , nickname , realname , email , phone , bio , avatar , state , created , updated , deleted } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: user :: $ field :: NAME) , + , crate :: prisma :: user :: uid :: NAME , crate :: prisma :: user :: name :: NAME , crate :: prisma :: user :: nickname :: NAME , crate :: prisma :: user :: realname :: NAME , crate :: prisma :: user :: email :: NAME , crate :: prisma :: user :: phone :: NAME , crate :: prisma :: user :: bio :: NAME , crate :: prisma :: user :: avatar :: NAME , crate :: prisma :: user :: state :: NAME , crate :: prisma :: user :: created :: NAME , crate :: prisma :: user :: updated :: NAME , crate :: prisma :: user :: deleted :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: user :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: user :: uid :: NAME => Ok (Field :: uid) , crate :: prisma :: user :: name :: NAME => Ok (Field :: name) , crate :: prisma :: user :: nickname :: NAME => Ok (Field :: nickname) , crate :: prisma :: user :: realname :: NAME => Ok (Field :: realname) , crate :: prisma :: user :: email :: NAME => Ok (Field :: email) , crate :: prisma :: user :: phone :: NAME => Ok (Field :: phone) , crate :: prisma :: user :: bio :: NAME => Ok (Field :: bio) , crate :: prisma :: user :: avatar :: NAME => Ok (Field :: avatar) , crate :: prisma :: user :: state :: NAME => Ok (Field :: state) , crate :: prisma :: user :: created :: NAME => Ok (Field :: created) , crate :: prisma :: user :: updated :: NAME => Ok (Field :: updated) , crate :: prisma :: user :: deleted :: NAME => Ok (Field :: deleted) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut uid = None ; let mut name = None ; let mut nickname = None ; let mut realname = None ; let mut email = None ; let mut phone = None ; let mut bio = None ; let mut avatar = None ; let mut state = None ; let mut created = None ; let mut updated = None ; let mut deleted = None ; while let Some (key) = map . next_key () ? { match key { Field :: uid => { if uid . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: uid :: NAME)) ; } uid = Some (map . next_value () ?) ; } Field :: name => { if name . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: name :: NAME)) ; } name = Some (map . next_value () ?) ; } Field :: nickname => { if nickname . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: nickname :: NAME)) ; } nickname = Some (map . next_value () ?) ; } Field :: realname => { if realname . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: realname :: NAME)) ; } realname = Some (map . next_value () ?) ; } Field :: email => { if email . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: email :: NAME)) ; } email = Some (map . next_value () ?) ; } Field :: phone => { if phone . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: phone :: NAME)) ; } phone = Some (map . next_value () ?) ; } Field :: bio => { if bio . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: bio :: NAME)) ; } bio = Some (map . next_value () ?) ; } Field :: avatar => { if avatar . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: avatar :: NAME)) ; } avatar = Some (map . next_value () ?) ; } Field :: state => { if state . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: state :: NAME)) ; } state = Some (map . next_value () ?) ; } Field :: created => { if created . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: created :: NAME)) ; } created = Some (map . next_value () ?) ; } Field :: updated => { if updated . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: updated :: NAME)) ; } updated = Some (map . next_value () ?) ; } Field :: deleted => { if deleted . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: deleted :: NAME)) ; } deleted = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: user :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: $ field :: NAME)) ? ;) * let uid = uid . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: uid :: NAME)) ? ; let name = name . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: name :: NAME)) ? ; let nickname = nickname . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: nickname :: NAME)) ? ; let realname = realname . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: realname :: NAME)) ? ; let email = email . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: email :: NAME)) ? ; let phone = phone . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: phone :: NAME)) ? ; let bio = bio . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: bio :: NAME)) ? ; let avatar = avatar . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: avatar :: NAME)) ? ; let state = state . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: state :: NAME)) ? ; let created = created . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: created :: NAME)) ? ; let updated = updated . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: updated :: NAME)) ? ; let deleted = deleted . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: user :: deleted :: NAME)) ? ; Ok (Data { uid , name , nickname , realname , email , phone , bio , avatar , state , created , updated , deleted , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["uid" , "name" , "nickname" , "realname" , "email" , "phone" , "bio" , "avatar" , "state" , "created" , "updated" , "deleted" , "GeoUser" , "Shop"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: user :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; geo_user : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < geo_user :: Data > } ; (@ field_type ; geo_user) => { Vec < crate :: prisma :: geo_user :: Data > } ; (@ field_type ; shop : $ selection_mode : ident { $ ($ selections : tt) + }) => { Vec < shop :: Data > } ; (@ field_type ; shop) => { Vec < crate :: prisma :: shop :: Data > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "User" , available relations are "geo_user, shop")) } ; (@ field_module ; geo_user : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: geo_user :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; shop : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: shop :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; geo_user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: user :: IncludeParam > :: into (crate :: prisma :: user :: geo_user :: Include :: $ selection_mode (crate :: prisma :: geo_user :: ManyArgs :: new (crate :: prisma :: geo_user :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: geo_user :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; geo_user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: user :: IncludeParam > :: into (crate :: prisma :: user :: geo_user :: Include :: Fetch (crate :: prisma :: geo_user :: ManyArgs :: new (crate :: prisma :: geo_user :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; shop $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: user :: IncludeParam > :: into (crate :: prisma :: user :: shop :: Include :: $ selection_mode (crate :: prisma :: shop :: ManyArgs :: new (crate :: prisma :: shop :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ? , crate :: prisma :: shop :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; shop $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: user :: IncludeParam > :: into (crate :: prisma :: user :: shop :: Include :: Fetch (crate :: prisma :: shop :: ManyArgs :: new (crate :: prisma :: shop :: include ! (@ filters_to_args ; $ ($ ($ filters) +) ?)) $ ($ (. $ arg ($ ($ arg_params) *)) *) ?) ,) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: user :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; uid) => { "uid" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; nickname) => { "nickname" } ; (@ field_serde_name ; realname) => { "realname" } ; (@ field_serde_name ; email) => { "email" } ; (@ field_serde_name ; phone) => { "phone" } ; (@ field_serde_name ; bio) => { "bio" } ; (@ field_serde_name ; avatar) => { "avatar" } ; (@ field_serde_name ; state) => { "state" } ; (@ field_serde_name ; created) => { "created" } ; (@ field_serde_name ; updated) => { "updated" } ; (@ field_serde_name ; deleted) => { "deleted" } ; (@ field_serde_name ; geo_user) => { "GeoUser" } ; (@ field_serde_name ; shop) => { "Shop" } ; }
    pub use _include_user as include;
    pub enum IncludeParam {
        Uid(uid::Include),
        Name(name::Include),
        Nickname(nickname::Include),
        Realname(realname::Include),
        Email(email::Include),
        Phone(phone::Include),
        Bio(bio::Include),
        Avatar(avatar::Include),
        State(state::Include),
        Created(created::Include),
        Updated(updated::Include),
        Deleted(deleted::Include),
        GeoUser(geo_user::Include),
        Shop(shop::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Uid(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Nickname(data) => data.to_selection(),
                Self::Realname(data) => data.to_selection(),
                Self::Email(data) => data.to_selection(),
                Self::Phone(data) => data.to_selection(),
                Self::Bio(data) => data.to_selection(),
                Self::Avatar(data) => data.to_selection(),
                Self::State(data) => data.to_selection(),
                Self::Created(data) => data.to_selection(),
                Self::Updated(data) => data.to_selection(),
                Self::Deleted(data) => data.to_selection(),
                Self::GeoUser(data) => data.to_selection(),
                Self::Shop(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_user { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: user struct $ struct_name { # [serde (rename = "uid")] pub uid : i64 , # [serde (rename = "name")] pub name : String , # [serde (rename = "nickname")] pub nickname : String , # [serde (rename = "realname")] pub realname : String , # [serde (rename = "email")] pub email : String , # [serde (rename = "phone")] pub phone : String , # [serde (rename = "bio")] pub bio : String , # [serde (rename = "avatar")] pub avatar : String , # [serde (rename = "state")] pub state : i32 , # [serde (rename = "created")] pub created : i64 , # [serde (rename = "updated")] pub updated : i64 , # [serde (rename = "deleted")] pub deleted : i64 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_user as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "uid")]
        pub uid: i64,
        #[serde(rename = "name")]
        pub name: String,
        #[serde(rename = "nickname")]
        pub nickname: String,
        #[serde(rename = "realname")]
        pub realname: String,
        #[serde(rename = "email")]
        pub email: String,
        #[serde(rename = "phone")]
        pub phone: String,
        #[serde(rename = "bio")]
        pub bio: String,
        #[serde(rename = "avatar")]
        pub avatar: String,
        #[serde(rename = "state")]
        pub state: i32,
        #[serde(rename = "created")]
        pub created: i64,
        #[serde(rename = "updated")]
        pub updated: i64,
        #[serde(rename = "deleted")]
        pub deleted: i64,
        #[serde(rename = "GeoUser")]
        pub geo_user: Option<Vec<super::geo_user::Data>>,
        #[serde(rename = "Shop")]
        pub shop: Option<Vec<super::shop::Data>>,
    }
    impl Data {
        pub fn geo_user(&self) -> Result<&Vec<super::geo_user::Data>, ::prisma_client_rust::RelationNotFetchedError> {
            self.geo_user.as_ref().ok_or(::prisma_client_rust::RelationNotFetchedError::new(stringify!(geo_user)))
        }
        pub fn shop(&self) -> Result<&Vec<super::shop::Data>, ::prisma_client_rust::RelationNotFetchedError> {
            self.shop.as_ref().ok_or(::prisma_client_rust::RelationNotFetchedError::new(stringify!(shop)))
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        GeoUser(super::geo_user::ManyArgs),
        Shop(super::shop::ManyArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::GeoUser(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections.extend(<super::geo_user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections());
                    ::prisma_client_rust::Selection::new(geo_user::NAME, None, arguments, nested_selections)
                }
                Self::Shop(args) => {
                    let (arguments, mut nested_selections) = args.to_graphql();
                    nested_selections.extend(<super::shop::Types as ::prisma_client_rust::ModelTypes>::scalar_selections());
                    ::prisma_client_rust::Selection::new(shop::NAME, None, arguments, nested_selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetUid(i64),
        IncrementUid(i64),
        DecrementUid(i64),
        MultiplyUid(i64),
        DivideUid(i64),
        SetName(String),
        SetNickname(String),
        SetRealname(String),
        SetEmail(String),
        SetPhone(String),
        SetBio(String),
        SetAvatar(String),
        SetState(i32),
        IncrementState(i32),
        DecrementState(i32),
        MultiplyState(i32),
        DivideState(i32),
        SetCreated(i64),
        IncrementCreated(i64),
        DecrementCreated(i64),
        MultiplyCreated(i64),
        DivideCreated(i64),
        SetUpdated(i64),
        IncrementUpdated(i64),
        DecrementUpdated(i64),
        MultiplyUpdated(i64),
        DivideUpdated(i64),
        SetDeleted(i64),
        IncrementDeleted(i64),
        DecrementDeleted(i64),
        MultiplyDeleted(i64),
        DivideDeleted(i64),
        ConnectGeoUser(Vec<super::geo_user::UniqueWhereParam>),
        DisconnectGeoUser(Vec<super::geo_user::UniqueWhereParam>),
        SetGeoUser(Vec<super::geo_user::UniqueWhereParam>),
        ConnectShop(Vec<super::shop::UniqueWhereParam>),
        DisconnectShop(Vec<super::shop::UniqueWhereParam>),
        SetShop(Vec<super::shop::UniqueWhereParam>),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetUid(value) => (uid::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetName(value) => (name::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetNickname(value) => (nickname::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetRealname(value) => (realname::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetEmail(value) => (email::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetPhone(value) => (phone::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetBio(value) => (bio::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetAvatar(value) => (avatar::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetState(value) => (state::NAME.to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64)),
                SetParam::IncrementState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::DecrementState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::MultiplyState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::DivideState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::SetCreated(value) => (created::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetUpdated(value) => (updated::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetDeleted(value) => (deleted::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::ConnectGeoUser(where_params) => (
                    geo_user::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::geo_user::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectGeoUser(where_params) => (
                    geo_user::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::geo_user::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetGeoUser(where_params) => (
                    geo_user::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::geo_user::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::ConnectShop(where_params) => (
                    shop::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::shop::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::DisconnectShop(where_params) => (
                    shop::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "disconnect".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::shop::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
                SetParam::SetShop(where_params) => (
                    shop::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "set".to_string(),
                        ::prisma_client_rust::PrismaValue::List(
                            where_params
                                .into_iter()
                                .map(Into::<super::shop::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .map(|v| ::prisma_client_rust::PrismaValue::Object(vec![v]))
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Uid(i64),
        Name(String),
        Nickname(String),
        Realname(String),
        Email(String),
        Phone(String),
        Bio(String),
        Avatar(String),
        State(i32),
        Created(i64),
        Updated(i64),
        Deleted(i64),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Uid(value) => Self::SetUid(value),
                UncheckedSetParam::Name(value) => Self::SetName(value),
                UncheckedSetParam::Nickname(value) => Self::SetNickname(value),
                UncheckedSetParam::Realname(value) => Self::SetRealname(value),
                UncheckedSetParam::Email(value) => Self::SetEmail(value),
                UncheckedSetParam::Phone(value) => Self::SetPhone(value),
                UncheckedSetParam::Bio(value) => Self::SetBio(value),
                UncheckedSetParam::Avatar(value) => Self::SetAvatar(value),
                UncheckedSetParam::State(value) => Self::SetState(value),
                UncheckedSetParam::Created(value) => Self::SetCreated(value),
                UncheckedSetParam::Updated(value) => Self::SetUpdated(value),
                UncheckedSetParam::Deleted(value) => Self::SetDeleted(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Uid(::prisma_client_rust::Direction),
        Name(::prisma_client_rust::Direction),
        Nickname(::prisma_client_rust::Direction),
        Realname(::prisma_client_rust::Direction),
        Email(::prisma_client_rust::Direction),
        Phone(::prisma_client_rust::Direction),
        Bio(::prisma_client_rust::Direction),
        Avatar(::prisma_client_rust::Direction),
        State(::prisma_client_rust::Direction),
        Created(::prisma_client_rust::Direction),
        Updated(::prisma_client_rust::Direction),
        Deleted(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Uid(direction) => (uid::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Name(direction) => (name::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Nickname(direction) => (nickname::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Realname(direction) => (realname::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Email(direction) => (email::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Phone(direction) => (phone::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Bio(direction) => (bio::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Avatar(direction) => (avatar::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::State(direction) => (state::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Created(direction) => (created::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Updated(direction) => (updated::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Deleted(direction) => (deleted::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Uid(_prisma::read_filters::BigIntFilter),
        Name(_prisma::read_filters::StringFilter),
        Nickname(_prisma::read_filters::StringFilter),
        Realname(_prisma::read_filters::StringFilter),
        Email(_prisma::read_filters::StringFilter),
        Phone(_prisma::read_filters::StringFilter),
        Bio(_prisma::read_filters::StringFilter),
        Avatar(_prisma::read_filters::StringFilter),
        State(_prisma::read_filters::IntFilter),
        Created(_prisma::read_filters::BigIntFilter),
        Updated(_prisma::read_filters::BigIntFilter),
        Deleted(_prisma::read_filters::BigIntFilter),
        GeoUserSome(Vec<super::geo_user::WhereParam>),
        GeoUserEvery(Vec<super::geo_user::WhereParam>),
        GeoUserNone(Vec<super::geo_user::WhereParam>),
        ShopSome(Vec<super::shop::WhereParam>),
        ShopEvery(Vec<super::shop::WhereParam>),
        ShopNone(Vec<super::shop::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Uid(value) => (uid::NAME, value.into()),
                Self::Name(value) => (name::NAME, value.into()),
                Self::Nickname(value) => (nickname::NAME, value.into()),
                Self::Realname(value) => (realname::NAME, value.into()),
                Self::Email(value) => (email::NAME, value.into()),
                Self::Phone(value) => (phone::NAME, value.into()),
                Self::Bio(value) => (bio::NAME, value.into()),
                Self::Avatar(value) => (avatar::NAME, value.into()),
                Self::State(value) => (state::NAME, value.into()),
                Self::Created(value) => (created::NAME, value.into()),
                Self::Updated(value) => (updated::NAME, value.into()),
                Self::Deleted(value) => (deleted::NAME, value.into()),
                Self::GeoUserSome(where_params) => (
                    geo_user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::GeoUserEvery(where_params) => (
                    geo_user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::GeoUserNone(where_params) => (
                    geo_user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ShopSome(where_params) => (
                    shop::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "some".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ShopEvery(where_params) => (
                    shop::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "every".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::ShopNone(where_params) => (
                    shop::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "none".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        NameEquals(String),
        EmailEquals(String),
        UidEquals(i64),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::NameEquals(value) => Self::Name(_prisma::read_filters::StringFilter::Equals(value)),
                UniqueWhereParam::EmailEquals(value) => Self::Email(_prisma::read_filters::StringFilter::Equals(value)),
                UniqueWhereParam::UidEquals(value) => Self::Uid(_prisma::read_filters::BigIntFilter::Equals(value)),
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(uid::NAME),
                ::prisma_client_rust::sel(name::NAME),
                ::prisma_client_rust::sel(nickname::NAME),
                ::prisma_client_rust::sel(realname::NAME),
                ::prisma_client_rust::sel(email::NAME),
                ::prisma_client_rust::sel(phone::NAME),
                ::prisma_client_rust::sel(bio::NAME),
                ::prisma_client_rust::sel(avatar::NAME),
                ::prisma_client_rust::sel(state::NAME),
                ::prisma_client_rust::sel(created::NAME),
                ::prisma_client_rust::sel(updated::NAME),
                ::prisma_client_rust::sel(deleted::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, name: String, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([name::set(name)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(self, name: String, mut _params: Vec<UncheckedSetParam>) -> Create<'a> {
            _params.extend([name::set(name)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(name, mut _params)| {
                    _params.extend([name::set(name)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(self, _where: UniqueWhereParam, _params: Vec<UncheckedSetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params.into_iter().map(Into::into).collect(), vec![])
        }
        pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(self, _where: UniqueWhereParam, (name, mut _params): (String, Vec<SetParam>), _update: Vec<SetParam>) -> Upsert<'a> {
            _params.extend([name::set(name)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod shop {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Shop";
    pub mod sid {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "sid";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetSid(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Sid(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Sid(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i64) -> T {
            UniqueWhereParam::SidEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Sid, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementSid(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementSid(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplySid(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideSid(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Sid(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Sid(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod uid {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "uid";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUid(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Uid(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Uid(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Uid(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Uid, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementUid(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementUid(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyUid(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideUid(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Uid(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Uid(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod name {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "name";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetName(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Name(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Name(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Name(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Name, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Name(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Name(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod description {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "description";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDescription(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Description(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Description(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Description(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Description, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn mode(_: super::super::QueryMode) -> Mode;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Description(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Description(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod state {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "state";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetState(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::State(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::State(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::State(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, State, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementState(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementState(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyState(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideState(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::State(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::State(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod created {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "created";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetCreated(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Created(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Created(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Created(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Created, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementCreated(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementCreated(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyCreated(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideCreated(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Created(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Created(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod updated {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "updated";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUpdated(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Updated(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Updated(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Updated(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Updated, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementUpdated(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementUpdated(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyUpdated(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideUpdated(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Updated(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Updated(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod deleted {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "deleted";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDeleted(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Deleted(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Deleted(direction)
        }
        pub fn equals(value: i64) -> WhereParam {
            WhereParam::Deleted(_prisma::read_filters::BigIntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Deleted, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementDeleted(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementDeleted(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyDeleted(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideDeleted(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Deleted(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Deleted(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod user {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "user";
        pub struct Fetch(pub user::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<user::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::User(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(user::UniqueArgs::new())
        }
        pub struct Connect(user::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectUser(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: user::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::UserIs(value)
        }
        pub fn is_not(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::UserIsNot(value)
        }
        pub enum Include {
            Select(Vec<user::SelectParam>),
            Include(Vec<user::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::User(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => selections.into_iter().map(|s| s.to_selection()).collect(),
                    Self::Include(selections) => {
                        let mut nested_selections = <user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => <user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                };
                ::prisma_client_rust::Selection::new("user", None, [], selections)
            }
            pub fn select(nested_selections: Vec<user::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<user::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<user::SelectParam>),
            Include(Vec<user::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::User(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => selections.into_iter().map(|s| s.to_selection()).collect(),
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => <user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                };
                ::prisma_client_rust::Selection::new("user", None, [], selections)
            }
            pub fn select(nested_selections: Vec<user::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<user::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub fn create(name: String, user: super::user::UniqueWhereParam, _params: Vec<SetParam>) -> (String, super::user::UniqueWhereParam, Vec<SetParam>) {
        (name, user, _params)
    }
    pub fn create_unchecked(uid: i64, name: String, _params: Vec<SetParam>) -> (i64, String, Vec<SetParam>) {
        (uid, name, _params)
    }
    #[macro_export]
    macro_rules ! _select_shop { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: shop :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: shop :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: shop :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: shop :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { sid , uid , name , description , state , created , updated , deleted , user } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: shop :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: shop :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: shop :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: shop :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["sid" , "uid" , "name" , "description" , "state" , "created" , "updated" , "deleted" , "user"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: shop :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; sid) => { i64 } ; (@ field_type ; uid) => { i64 } ; (@ field_type ; name) => { String } ; (@ field_type ; description) => { String } ; (@ field_type ; state) => { i32 } ; (@ field_type ; created) => { i64 } ; (@ field_type ; updated) => { i64 } ; (@ field_type ; deleted) => { i64 } ; (@ field_type ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { user :: Data } ; (@ field_type ; user) => { crate :: prisma :: user :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Shop" , available relations are "sid, uid, name, description, state, created, updated, deleted, user")) } ; (@ field_module ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: user :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; sid) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: sid :: Select) } ; (@ selection_field_to_selection_param ; uid) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: uid :: Select) } ; (@ selection_field_to_selection_param ; name) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: name :: Select) } ; (@ selection_field_to_selection_param ; description) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: description :: Select) } ; (@ selection_field_to_selection_param ; state) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: state :: Select) } ; (@ selection_field_to_selection_param ; created) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: created :: Select) } ; (@ selection_field_to_selection_param ; updated) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: updated :: Select) } ; (@ selection_field_to_selection_param ; deleted) => { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: deleted :: Select) } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: user :: Select :: $ selection_mode (crate :: prisma :: user :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: shop :: SelectParam > :: into (crate :: prisma :: shop :: user :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: shop :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; sid) => { "sid" } ; (@ field_serde_name ; uid) => { "uid" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; description) => { "description" } ; (@ field_serde_name ; state) => { "state" } ; (@ field_serde_name ; created) => { "created" } ; (@ field_serde_name ; updated) => { "updated" } ; (@ field_serde_name ; deleted) => { "deleted" } ; (@ field_serde_name ; user) => { "user" } ; }
    pub use _select_shop as select;
    pub enum SelectParam {
        Sid(sid::Select),
        Uid(uid::Select),
        Name(name::Select),
        Description(description::Select),
        State(state::Select),
        Created(created::Select),
        Updated(updated::Select),
        Deleted(deleted::Select),
        User(user::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Sid(data) => data.to_selection(),
                Self::Uid(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Description(data) => data.to_selection(),
                Self::State(data) => data.to_selection(),
                Self::Created(data) => data.to_selection(),
                Self::Updated(data) => data.to_selection(),
                Self::Deleted(data) => data.to_selection(),
                Self::User(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_shop { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: shop :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: shop :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: shop :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: shop :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: shop :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: shop :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { user } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub sid : i64 , pub uid : i64 , pub name : String , pub description : String , pub state : i32 , pub created : i64 , pub updated : i64 , pub deleted : i64 , $ (pub $ field : crate :: prisma :: shop :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (sid) , stringify ! (uid) , stringify ! (name) , stringify ! (description) , stringify ! (state) , stringify ! (created) , stringify ! (updated) , stringify ! (deleted)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: shop :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: shop :: sid :: NAME , & self . sid) ? ; state . serialize_field (crate :: prisma :: shop :: uid :: NAME , & self . uid) ? ; state . serialize_field (crate :: prisma :: shop :: name :: NAME , & self . name) ? ; state . serialize_field (crate :: prisma :: shop :: description :: NAME , & self . description) ? ; state . serialize_field (crate :: prisma :: shop :: state :: NAME , & self . state) ? ; state . serialize_field (crate :: prisma :: shop :: created :: NAME , & self . created) ? ; state . serialize_field (crate :: prisma :: shop :: updated :: NAME , & self . updated) ? ; state . serialize_field (crate :: prisma :: shop :: deleted :: NAME , & self . deleted) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , sid , uid , name , description , state , created , updated , deleted } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: shop :: $ field :: NAME) , + , crate :: prisma :: shop :: sid :: NAME , crate :: prisma :: shop :: uid :: NAME , crate :: prisma :: shop :: name :: NAME , crate :: prisma :: shop :: description :: NAME , crate :: prisma :: shop :: state :: NAME , crate :: prisma :: shop :: created :: NAME , crate :: prisma :: shop :: updated :: NAME , crate :: prisma :: shop :: deleted :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: shop :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: shop :: sid :: NAME => Ok (Field :: sid) , crate :: prisma :: shop :: uid :: NAME => Ok (Field :: uid) , crate :: prisma :: shop :: name :: NAME => Ok (Field :: name) , crate :: prisma :: shop :: description :: NAME => Ok (Field :: description) , crate :: prisma :: shop :: state :: NAME => Ok (Field :: state) , crate :: prisma :: shop :: created :: NAME => Ok (Field :: created) , crate :: prisma :: shop :: updated :: NAME => Ok (Field :: updated) , crate :: prisma :: shop :: deleted :: NAME => Ok (Field :: deleted) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut sid = None ; let mut uid = None ; let mut name = None ; let mut description = None ; let mut state = None ; let mut created = None ; let mut updated = None ; let mut deleted = None ; while let Some (key) = map . next_key () ? { match key { Field :: sid => { if sid . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: sid :: NAME)) ; } sid = Some (map . next_value () ?) ; } Field :: uid => { if uid . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: uid :: NAME)) ; } uid = Some (map . next_value () ?) ; } Field :: name => { if name . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: name :: NAME)) ; } name = Some (map . next_value () ?) ; } Field :: description => { if description . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: description :: NAME)) ; } description = Some (map . next_value () ?) ; } Field :: state => { if state . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: state :: NAME)) ; } state = Some (map . next_value () ?) ; } Field :: created => { if created . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: created :: NAME)) ; } created = Some (map . next_value () ?) ; } Field :: updated => { if updated . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: updated :: NAME)) ; } updated = Some (map . next_value () ?) ; } Field :: deleted => { if deleted . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: deleted :: NAME)) ; } deleted = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: shop :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: $ field :: NAME)) ? ;) * let sid = sid . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: sid :: NAME)) ? ; let uid = uid . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: uid :: NAME)) ? ; let name = name . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: name :: NAME)) ? ; let description = description . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: description :: NAME)) ? ; let state = state . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: state :: NAME)) ? ; let created = created . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: created :: NAME)) ? ; let updated = updated . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: updated :: NAME)) ? ; let deleted = deleted . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: shop :: deleted :: NAME)) ? ; Ok (Data { sid , uid , name , description , state , created , updated , deleted , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["sid" , "uid" , "name" , "description" , "state" , "created" , "updated" , "deleted" , "user"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: shop :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { user :: Data } ; (@ field_type ; user) => { crate :: prisma :: user :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Shop" , available relations are "user")) } ; (@ field_module ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: user :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: shop :: IncludeParam > :: into (crate :: prisma :: shop :: user :: Include :: $ selection_mode (crate :: prisma :: user :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: shop :: IncludeParam > :: into (crate :: prisma :: shop :: user :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: shop :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; sid) => { "sid" } ; (@ field_serde_name ; uid) => { "uid" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; description) => { "description" } ; (@ field_serde_name ; state) => { "state" } ; (@ field_serde_name ; created) => { "created" } ; (@ field_serde_name ; updated) => { "updated" } ; (@ field_serde_name ; deleted) => { "deleted" } ; (@ field_serde_name ; user) => { "user" } ; }
    pub use _include_shop as include;
    pub enum IncludeParam {
        Sid(sid::Include),
        Uid(uid::Include),
        Name(name::Include),
        Description(description::Include),
        State(state::Include),
        Created(created::Include),
        Updated(updated::Include),
        Deleted(deleted::Include),
        User(user::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Sid(data) => data.to_selection(),
                Self::Uid(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Description(data) => data.to_selection(),
                Self::State(data) => data.to_selection(),
                Self::Created(data) => data.to_selection(),
                Self::Updated(data) => data.to_selection(),
                Self::Deleted(data) => data.to_selection(),
                Self::User(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_shop { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: shop struct $ struct_name { # [serde (rename = "sid")] pub sid : i64 , # [serde (rename = "uid")] pub uid : i64 , # [serde (rename = "name")] pub name : String , # [serde (rename = "description")] pub description : String , # [serde (rename = "state")] pub state : i32 , # [serde (rename = "created")] pub created : i64 , # [serde (rename = "updated")] pub updated : i64 , # [serde (rename = "deleted")] pub deleted : i64 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_shop as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "sid")]
        pub sid: i64,
        #[serde(rename = "uid")]
        pub uid: i64,
        #[serde(rename = "name")]
        pub name: String,
        #[serde(rename = "description")]
        pub description: String,
        #[serde(rename = "state")]
        pub state: i32,
        #[serde(rename = "created")]
        pub created: i64,
        #[serde(rename = "updated")]
        pub updated: i64,
        #[serde(rename = "deleted")]
        pub deleted: i64,
        #[serde(rename = "user")]
        pub user: Option<Box<super::user::Data>>,
    }
    impl Data {
        pub fn user(&self) -> Result<&super::user::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.user
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(stringify!(user)))
                .map(|v| v.as_ref())
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        User(super::user::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::User(args) => {
                    let mut selections = <super::user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                    selections.extend(args.with_params.into_iter().map(Into::<::prisma_client_rust::Selection>::into));
                    ::prisma_client_rust::Selection::new(user::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetSid(i64),
        IncrementSid(i64),
        DecrementSid(i64),
        MultiplySid(i64),
        DivideSid(i64),
        SetUid(i64),
        IncrementUid(i64),
        DecrementUid(i64),
        MultiplyUid(i64),
        DivideUid(i64),
        SetName(String),
        SetDescription(String),
        SetState(i32),
        IncrementState(i32),
        DecrementState(i32),
        MultiplyState(i32),
        DivideState(i32),
        SetCreated(i64),
        IncrementCreated(i64),
        DecrementCreated(i64),
        MultiplyCreated(i64),
        DivideCreated(i64),
        SetUpdated(i64),
        IncrementUpdated(i64),
        DecrementUpdated(i64),
        MultiplyUpdated(i64),
        DivideUpdated(i64),
        SetDeleted(i64),
        IncrementDeleted(i64),
        DecrementDeleted(i64),
        MultiplyDeleted(i64),
        DivideDeleted(i64),
        ConnectUser(super::user::UniqueWhereParam),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetSid(value) => (sid::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementSid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementSid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplySid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideSid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetUid(value) => (uid::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetName(value) => (name::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetDescription(value) => (description::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
                SetParam::SetState(value) => (state::NAME.to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64)),
                SetParam::IncrementState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::DecrementState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::MultiplyState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::DivideState(value) => (
                    state::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                ),
                SetParam::SetCreated(value) => (created::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideCreated(value) => (
                    created::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetUpdated(value) => (updated::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideUpdated(value) => (
                    updated::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::SetDeleted(value) => (deleted::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideDeleted(value) => (
                    deleted::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::ConnectUser(where_param) => (
                    user::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::user::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Sid(i64),
        Uid(i64),
        Name(String),
        Description(String),
        State(i32),
        Created(i64),
        Updated(i64),
        Deleted(i64),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Sid(value) => Self::SetSid(value),
                UncheckedSetParam::Uid(value) => Self::SetUid(value),
                UncheckedSetParam::Name(value) => Self::SetName(value),
                UncheckedSetParam::Description(value) => Self::SetDescription(value),
                UncheckedSetParam::State(value) => Self::SetState(value),
                UncheckedSetParam::Created(value) => Self::SetCreated(value),
                UncheckedSetParam::Updated(value) => Self::SetUpdated(value),
                UncheckedSetParam::Deleted(value) => Self::SetDeleted(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Sid(::prisma_client_rust::Direction),
        Uid(::prisma_client_rust::Direction),
        Name(::prisma_client_rust::Direction),
        Description(::prisma_client_rust::Direction),
        State(::prisma_client_rust::Direction),
        Created(::prisma_client_rust::Direction),
        Updated(::prisma_client_rust::Direction),
        Deleted(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Sid(direction) => (sid::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Uid(direction) => (uid::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Name(direction) => (name::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Description(direction) => (description::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::State(direction) => (state::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Created(direction) => (created::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Updated(direction) => (updated::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
                Self::Deleted(direction) => (deleted::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Sid(_prisma::read_filters::BigIntFilter),
        Uid(_prisma::read_filters::BigIntFilter),
        Name(_prisma::read_filters::StringFilter),
        Description(_prisma::read_filters::StringFilter),
        State(_prisma::read_filters::IntFilter),
        Created(_prisma::read_filters::BigIntFilter),
        Updated(_prisma::read_filters::BigIntFilter),
        Deleted(_prisma::read_filters::BigIntFilter),
        UserIs(Vec<super::user::WhereParam>),
        UserIsNot(Vec<super::user::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Sid(value) => (sid::NAME, value.into()),
                Self::Uid(value) => (uid::NAME, value.into()),
                Self::Name(value) => (name::NAME, value.into()),
                Self::Description(value) => (description::NAME, value.into()),
                Self::State(value) => (state::NAME, value.into()),
                Self::Created(value) => (created::NAME, value.into()),
                Self::Updated(value) => (updated::NAME, value.into()),
                Self::Deleted(value) => (deleted::NAME, value.into()),
                Self::UserIs(where_params) => (
                    user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::UserIsNot(where_params) => (
                    user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        SidEquals(i64),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::SidEquals(value) => Self::Sid(_prisma::read_filters::BigIntFilter::Equals(value)),
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(sid::NAME),
                ::prisma_client_rust::sel(uid::NAME),
                ::prisma_client_rust::sel(name::NAME),
                ::prisma_client_rust::sel(description::NAME),
                ::prisma_client_rust::sel(state::NAME),
                ::prisma_client_rust::sel(created::NAME),
                ::prisma_client_rust::sel(updated::NAME),
                ::prisma_client_rust::sel(deleted::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(self, name: String, user: super::user::UniqueWhereParam, mut _params: Vec<SetParam>) -> Create<'a> {
            _params.extend([name::set(name), user::connect(user)]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(self, uid: i64, name: String, mut _params: Vec<UncheckedSetParam>) -> Create<'a> {
            _params.extend([uid::set(uid), name::set(name)]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(i64, String, Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(uid, name, mut _params)| {
                    _params.extend([uid::set(uid), name::set(name)]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(self, _where: UniqueWhereParam, _params: Vec<UncheckedSetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params.into_iter().map(Into::into).collect(), vec![])
        }
        pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(self, _where: UniqueWhereParam, (name, user, mut _params): (String, super::user::UniqueWhereParam, Vec<SetParam>), _update: Vec<SetParam>) -> Upsert<'a> {
            _params.extend([name::set(name), user::connect(user)]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod geo_user {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "GeoUser";
    pub mod uid {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "uid";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetUid(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Uid(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Uid(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i64) -> T {
            UniqueWhereParam::UidEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Uid, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementUid(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementUid(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplyUid(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideUid(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Uid(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Uid(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod user {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "user";
        pub struct Fetch(pub user::UniqueArgs);
        impl Fetch {
            pub fn with(mut self, params: impl Into<user::WithParam>) -> Self {
                self.0 = self.0.with(params.into());
                self
            }
        }
        impl From<Fetch> for WithParam {
            fn from(Fetch(v): Fetch) -> Self {
                WithParam::User(v)
            }
        }
        pub fn fetch() -> Fetch {
            Fetch(user::UniqueArgs::new())
        }
        pub struct Connect(user::UniqueWhereParam);
        impl From<Connect> for SetParam {
            fn from(Connect(v): Connect) -> Self {
                Self::ConnectUser(v)
            }
        }
        pub fn connect<T: From<Connect>>(value: user::UniqueWhereParam) -> T {
            Connect(value).into()
        }
        pub fn is(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::UserIs(value)
        }
        pub fn is_not(value: Vec<user::WhereParam>) -> WhereParam {
            WhereParam::UserIsNot(value)
        }
        pub enum Include {
            Select(Vec<user::SelectParam>),
            Include(Vec<user::IncludeParam>),
            Fetch,
        }
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::User(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => selections.into_iter().map(|s| s.to_selection()).collect(),
                    Self::Include(selections) => {
                        let mut nested_selections = <user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => <user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                };
                ::prisma_client_rust::Selection::new("user", None, [], selections)
            }
            pub fn select(nested_selections: Vec<user::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<user::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
        pub enum Select {
            Select(Vec<user::SelectParam>),
            Include(Vec<user::IncludeParam>),
            Fetch,
        }
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::User(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                let selections = match self {
                    Self::Select(selections) => selections.into_iter().map(|s| s.to_selection()).collect(),
                    Self::Include(selections) => {
                        let mut nested_selections = vec![];
                        nested_selections.extend(selections.into_iter().map(|s| s.to_selection()));
                        nested_selections
                    }
                    Self::Fetch => <user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections(),
                };
                ::prisma_client_rust::Selection::new("user", None, [], selections)
            }
            pub fn select(nested_selections: Vec<user::SelectParam>) -> Self {
                Self::Select(nested_selections)
            }
            pub fn include(nested_selections: Vec<user::IncludeParam>) -> Self {
                Self::Include(nested_selections)
            }
        }
    }
    pub fn create_unchecked(_params: Vec<SetParam>) -> (Vec<SetParam>) {
        (_params)
    }
    #[macro_export]
    macro_rules ! _select_geo_user { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: geo_user :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: geo_user :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: geo_user :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: geo_user :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { uid , user } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: geo_user :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: geo_user :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: geo_user :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: geo_user :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: geo_user :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: geo_user :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["uid" , "pt" , "user"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: geo_user :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; uid) => { i64 } ; (@ field_type ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { user :: Data } ; (@ field_type ; user) => { crate :: prisma :: user :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "GeoUser" , available relations are "uid, user")) } ; (@ field_module ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: user :: select ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; uid) => { Into :: < crate :: prisma :: geo_user :: SelectParam > :: into (crate :: prisma :: geo_user :: uid :: Select) } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: geo_user :: SelectParam > :: into (crate :: prisma :: geo_user :: user :: Select :: $ selection_mode (crate :: prisma :: user :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: geo_user :: SelectParam > :: into (crate :: prisma :: geo_user :: user :: Select :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: geo_user :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; uid) => { "uid" } ; (@ field_serde_name ; user) => { "user" } ; }
    pub use _select_geo_user as select;
    pub enum SelectParam {
        Uid(uid::Select),
        User(user::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Uid(data) => data.to_selection(),
                Self::User(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_geo_user { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: geo_user :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: geo_user :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: geo_user :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: geo_user :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_user :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: geo_user :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: geo_user :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { user } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub uid : i64 , $ (pub $ field : crate :: prisma :: geo_user :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (uid)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: geo_user :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: geo_user :: uid :: NAME , & self . uid) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , uid } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: geo_user :: $ field :: NAME) , + , crate :: prisma :: geo_user :: uid :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: geo_user :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: geo_user :: uid :: NAME => Ok (Field :: uid) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut uid = None ; while let Some (key) = map . next_key () ? { match key { Field :: uid => { if uid . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: geo_user :: uid :: NAME)) ; } uid = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: geo_user :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: geo_user :: $ field :: NAME)) ? ;) * let uid = uid . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: geo_user :: uid :: NAME)) ? ; Ok (Data { uid , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["uid" , "pt" , "user"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: geo_user :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { user :: Data } ; (@ field_type ; user) => { crate :: prisma :: user :: Data } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "GeoUser" , available relations are "user")) } ; (@ field_module ; user : $ selection_mode : ident { $ ($ selections : tt) + }) => { crate :: prisma :: user :: include ! (@ definitions ; ; $ ($ selections) +) ; } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? : $ selection_mode : ident { $ ($ selections : tt) + }) => { { Into :: < crate :: prisma :: geo_user :: IncludeParam > :: into (crate :: prisma :: geo_user :: user :: Include :: $ selection_mode (crate :: prisma :: user :: select ! (@ selections_to_params ; : $ selection_mode { $ ($ selections) + }) . into_iter () . collect ())) } } ; (@ selection_field_to_selection_param ; user $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ?) => { { Into :: < crate :: prisma :: geo_user :: IncludeParam > :: into (crate :: prisma :: geo_user :: user :: Include :: Fetch) } } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: geo_user :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; uid) => { "uid" } ; (@ field_serde_name ; user) => { "user" } ; }
    pub use _include_geo_user as include;
    pub enum IncludeParam {
        Uid(uid::Include),
        User(user::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Uid(data) => data.to_selection(),
                Self::User(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_geo_user { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: geo_user struct $ struct_name { # [serde (rename = "uid")] pub uid : i64 , # [serde (rename = "pt")] pub pt : } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_geo_user as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "uid")]
        pub uid: i64,
        #[serde(rename = "user")]
        pub user: Option<Box<super::user::Data>>,
    }
    impl Data {
        pub fn user(&self) -> Result<&super::user::Data, ::prisma_client_rust::RelationNotFetchedError> {
            self.user
                .as_ref()
                .ok_or(::prisma_client_rust::RelationNotFetchedError::new(stringify!(user)))
                .map(|v| v.as_ref())
        }
    }
    #[derive(Clone)]
    pub enum WithParam {
        User(super::user::UniqueArgs),
    }
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::User(args) => {
                    let mut selections = <super::user::Types as ::prisma_client_rust::ModelTypes>::scalar_selections();
                    selections.extend(args.with_params.into_iter().map(Into::<::prisma_client_rust::Selection>::into));
                    ::prisma_client_rust::Selection::new(user::NAME, None, [], selections)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetUid(i64),
        IncrementUid(i64),
        DecrementUid(i64),
        MultiplyUid(i64),
        DivideUid(i64),
        ConnectUser(super::user::UniqueWhereParam),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetUid(value) => (uid::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplyUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideUid(value) => (
                    uid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::ConnectUser(where_param) => (
                    user::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "connect".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            [where_param]
                                .into_iter()
                                .map(Into::<super::user::WhereParam>::into)
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Uid(i64),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Uid(value) => Self::SetUid(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Uid(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Uid(direction) => (uid::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Uid(_prisma::read_filters::BigIntFilter),
        UserIs(Vec<super::user::WhereParam>),
        UserIsNot(Vec<super::user::WhereParam>),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Uid(value) => (uid::NAME, value.into()),
                Self::UserIs(where_params) => (
                    user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "is".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
                Self::UserIsNot(where_params) => (
                    user::NAME,
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "isNot".to_string(),
                        ::prisma_client_rust::PrismaValue::Object(
                            where_params
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(::prisma_client_rust::SerializedWhereInput::transform_equals)
                                .collect(),
                        ),
                    )]),
                ),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        UidEquals(i64),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::UidEquals(value) => Self::Uid(_prisma::read_filters::BigIntFilter::Equals(value)),
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![::prisma_client_rust::sel(uid::NAME)]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create_unchecked(self, mut _params: Vec<UncheckedSetParam>) -> Create<'a> {
            _params.extend([]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(mut _params)| {
                    _params.extend([]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(self, _where: UniqueWhereParam, _params: Vec<UncheckedSetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params.into_iter().map(Into::into).collect(), vec![])
        }
        pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod geo_shop {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "GeoShop";
    pub mod sid {
        use super::super::*;
        use super::_prisma::*;
        use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
        pub const NAME: &str = "sid";
        pub struct Set(pub i64);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetSid(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Sid(v)
            }
        }
        pub fn set<T: From<Set>>(value: i64) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Sid(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i64) -> T {
            UniqueWhereParam::SidEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::BigIntFilter, Sid, {
            fn in_vec(_: Vec<i64>) -> InVec;
            fn not_in_vec(_: Vec<i64>) -> NotInVec;
            fn lt(_: i64) -> Lt;
            fn lte(_: i64) -> Lte;
            fn gt(_: i64) -> Gt;
            fn gte(_: i64) -> Gte;
            fn not(_: i64) -> Not;
        });
        pub fn increment(value: i64) -> SetParam {
            SetParam::IncrementSid(value)
        }
        pub fn decrement(value: i64) -> SetParam {
            SetParam::DecrementSid(value)
        }
        pub fn multiply(value: i64) -> SetParam {
            SetParam::MultiplySid(value)
        }
        pub fn divide(value: i64) -> SetParam {
            SetParam::DivideSid(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Sid(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Sid(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create_unchecked(_params: Vec<SetParam>) -> (Vec<SetParam>) {
        (_params)
    }
    #[macro_export]
    macro_rules ! _select_geo_shop { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: geo_shop :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: geo_shop :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: geo_shop :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: geo_shop :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { sid } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: geo_shop :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: geo_shop :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: geo_shop :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: geo_shop :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: geo_shop :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: geo_shop :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["sid" , "pt"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: geo_shop :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; sid) => { i64 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "GeoShop" , available relations are "sid")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; sid) => { Into :: < crate :: prisma :: geo_shop :: SelectParam > :: into (crate :: prisma :: geo_shop :: sid :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: geo_shop :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; sid) => { "sid" } ; }
    pub use _select_geo_shop as select;
    pub enum SelectParam {
        Sid(sid::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Sid(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_geo_shop { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: geo_shop :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: geo_shop :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: geo_shop :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: geo_shop :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: geo_shop :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: geo_shop :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: geo_shop :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub sid : i64 , $ (pub $ field : crate :: prisma :: geo_shop :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (sid)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: geo_shop :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: geo_shop :: sid :: NAME , & self . sid) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , sid } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: geo_shop :: $ field :: NAME) , + , crate :: prisma :: geo_shop :: sid :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: geo_shop :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: geo_shop :: sid :: NAME => Ok (Field :: sid) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut sid = None ; while let Some (key) = map . next_key () ? { match key { Field :: sid => { if sid . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: geo_shop :: sid :: NAME)) ; } sid = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: geo_shop :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: geo_shop :: $ field :: NAME)) ? ;) * let sid = sid . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: geo_shop :: sid :: NAME)) ? ; Ok (Data { sid , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["sid" , "pt"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: geo_shop :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "GeoShop" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: geo_shop :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; sid) => { "sid" } ; }
    pub use _include_geo_shop as include;
    pub enum IncludeParam {
        Sid(sid::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Sid(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_geo_shop { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: geo_shop struct $ struct_name { # [serde (rename = "sid")] pub sid : i64 , # [serde (rename = "pt")] pub pt : } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_geo_shop as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "sid")]
        pub sid: i64,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetSid(i64),
        IncrementSid(i64),
        DecrementSid(i64),
        MultiplySid(i64),
        DivideSid(i64),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetSid(value) => (sid::NAME.to_string(), ::prisma_client_rust::PrismaValue::BigInt(value)),
                SetParam::IncrementSid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("increment".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DecrementSid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("decrement".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::MultiplySid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("multiply".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
                SetParam::DivideSid(value) => (
                    sid::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![("divide".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Sid(i64),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Sid(value) => Self::SetSid(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Sid(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Sid(direction) => (sid::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Sid(_prisma::read_filters::BigIntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
                        value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
                    )),
                ),
                Self::Sid(value) => (sid::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        SidEquals(i64),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::SidEquals(value) => Self::Sid(_prisma::read_filters::BigIntFilter::Equals(value)),
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![::prisma_client_rust::sel(sid::NAME)]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create_unchecked(self, mut _params: Vec<UncheckedSetParam>) -> Create<'a> {
            _params.extend([]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(self, data: Vec<(Vec<SetParam>)>) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(|(mut _params)| {
                    _params.extend([]);
                    _params
                })
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(self, _where: UniqueWhereParam, _params: Vec<UncheckedSetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params.into_iter().map(Into::into).collect(), vec![])
        }
        pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod _prisma {
    pub struct PrismaClientBuilder {
        url: Option<String>,
        action_notifier: ::prisma_client_rust::ActionNotifier,
    }
    impl PrismaClientBuilder {
        fn new() -> Self {
            Self {
                url: None,
                action_notifier: ::prisma_client_rust::ActionNotifier::new(),
            }
        }
        pub fn with_url(mut self, url: String) -> Self {
            self.url = Some(url);
            self
        }
        pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
            let internals = ::prisma_client_rust::PrismaClientInternals::new(self.url, self.action_notifier, super::DATAMODEL_STR).await?;
            Ok(PrismaClient(internals))
        }
    }
    pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
    impl ::std::fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub fn _builder() -> PrismaClientBuilder {
            PrismaClientBuilder::new()
        }
        pub fn _query_raw<T: ::prisma_client_rust::Data>(&self, query: ::prisma_client_rust::Raw) -> ::prisma_client_rust::QueryRaw<T> {
            ::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub fn _execute_raw(&self, query: ::prisma_client_rust::Raw) -> ::prisma_client_rust::ExecuteRaw {
            ::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub async fn _batch<'batch, T: ::prisma_client_rust::BatchContainer<'batch, Marker>, Marker>(
            &self,
            queries: T,
        ) -> ::prisma_client_rust::Result<<T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType> {
            ::prisma_client_rust::batch(queries, &self.0).await
        }
        pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
            ::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
        }
        pub async fn _migrate_deploy(&self) -> Result<(), ::prisma_client_rust::migrations::MigrateDeployError> {
            let res = ::prisma_client_rust::migrations::migrate_deploy(super::DATAMODEL_STR, super::MIGRATIONS_DIR, &self.0.url()).await;
            ::prisma_client_rust::tokio::time::sleep(core::time::Duration::from_millis(1)).await;
            res
        }
        pub async fn _migrate_resolve(&self, migration: &str) -> Result<(), ::prisma_client_rust::migrations::MigrateResolveError> {
            ::prisma_client_rust::migrations::migrate_resolve(migration, super::DATAMODEL_STR, super::MIGRATIONS_DIR, &self.0.url()).await
        }
        pub fn _db_push(&self) -> ::prisma_client_rust::migrations::DbPush {
            ::prisma_client_rust::migrations::db_push(super::DATAMODEL_STR, &self.0.url())
        }
        pub fn user(&self) -> super::user::Actions {
            super::user::Actions { client: &self.0 }
        }
        pub fn shop(&self) -> super::shop::Actions {
            super::shop::Actions { client: &self.0 }
        }
        pub fn geo_user(&self) -> super::geo_user::Actions {
            super::geo_user::Actions { client: &self.0 }
        }
        pub fn geo_shop(&self) -> super::geo_shop::Actions {
            super::geo_shop::Actions { client: &self.0 }
        }
    }
    impl ::prisma_client_rust::PrismaClient for PrismaClient {
        fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
            &self.0
        }
        fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
            &mut self.0
        }
        fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
            Self(self.0.with_tx_id(tx_id))
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum GeoShopScalarFieldEnum {
        #[serde(rename = "sid")]
        Sid,
    }
    impl ToString for GeoShopScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Sid => "sid".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum GeoUserScalarFieldEnum {
        #[serde(rename = "uid")]
        Uid,
    }
    impl ToString for GeoUserScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Uid => "uid".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum QueryMode {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "insensitive")]
        Insensitive,
    }
    impl ToString for QueryMode {
        fn to_string(&self) -> String {
            match self {
                Self::Default => "default".to_string(),
                Self::Insensitive => "insensitive".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum ShopScalarFieldEnum {
        #[serde(rename = "sid")]
        Sid,
        #[serde(rename = "uid")]
        Uid,
        #[serde(rename = "name")]
        Name,
        #[serde(rename = "description")]
        Description,
        #[serde(rename = "state")]
        State,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "updated")]
        Updated,
        #[serde(rename = "deleted")]
        Deleted,
    }
    impl ToString for ShopScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Sid => "sid".to_string(),
                Self::Uid => "uid".to_string(),
                Self::Name => "name".to_string(),
                Self::Description => "description".to_string(),
                Self::State => "state".to_string(),
                Self::Created => "created".to_string(),
                Self::Updated => "updated".to_string(),
                Self::Deleted => "deleted".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TransactionIsolationLevel {
        #[serde(rename = "ReadUncommitted")]
        ReadUncommitted,
        #[serde(rename = "ReadCommitted")]
        ReadCommitted,
        #[serde(rename = "RepeatableRead")]
        RepeatableRead,
        #[serde(rename = "Serializable")]
        Serializable,
    }
    impl ToString for TransactionIsolationLevel {
        fn to_string(&self) -> String {
            match self {
                Self::ReadUncommitted => "ReadUncommitted".to_string(),
                Self::ReadCommitted => "ReadCommitted".to_string(),
                Self::RepeatableRead => "RepeatableRead".to_string(),
                Self::Serializable => "Serializable".to_string(),
            }
        }
    }
    impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum UserScalarFieldEnum {
        #[serde(rename = "uid")]
        Uid,
        #[serde(rename = "name")]
        Name,
        #[serde(rename = "nickname")]
        Nickname,
        #[serde(rename = "realname")]
        Realname,
        #[serde(rename = "email")]
        Email,
        #[serde(rename = "phone")]
        Phone,
        #[serde(rename = "bio")]
        Bio,
        #[serde(rename = "avatar")]
        Avatar,
        #[serde(rename = "state")]
        State,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "updated")]
        Updated,
        #[serde(rename = "deleted")]
        Deleted,
    }
    impl ToString for UserScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Uid => "uid".to_string(),
                Self::Name => "name".to_string(),
                Self::Nickname => "nickname".to_string(),
                Self::Realname => "realname".to_string(),
                Self::Email => "email".to_string(),
                Self::Phone => "phone".to_string(),
                Self::Bio => "bio".to_string(),
                Self::Avatar => "avatar".to_string(),
                Self::State => "state".to_string(),
                Self::Created => "created".to_string(),
                Self::Updated => "updated".to_string(),
                Self::Deleted => "deleted".to_string(),
            }
        }
    }
    pub mod read_filters {
        #[derive(Clone)]
        pub enum BigIntFilter {
            Equals(i64),
            InVec(Vec<i64>),
            NotInVec(Vec<i64>),
            Lt(i64),
            Lte(i64),
            Gt(i64),
            Gte(i64),
            Not(i64),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for BigIntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("equals".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::BigInt(value)).collect()),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::BigInt(value)).collect()),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("lt".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("lte".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("gt".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("gte".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("not".to_string(), ::prisma_client_rust::PrismaValue::BigInt(value))]),
                }
            }
        }
        #[derive(Clone)]
        pub enum StringFilter {
            Equals(String),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Mode(super::super::QueryMode),
            Not(String),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("equals".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::String(value)).collect()),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::String(value)).collect()),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("lt".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("lte".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("gt".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("gte".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::Contains(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("contains".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![("startsWith".to_string(), ::prisma_client_rust::PrismaValue::String(value))])
                    }
                    Self::EndsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("endsWith".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                    Self::Mode(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("mode".to_string(), ::prisma_client_rust::PrismaValue::Enum(value.to_string()))]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("not".to_string(), ::prisma_client_rust::PrismaValue::String(value))]),
                }
            }
        }
        #[derive(Clone)]
        pub enum IntFilter {
            Equals(i32),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(i32),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("equals".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                    Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "in".to_string(),
                        ::prisma_client_rust::PrismaValue::List(value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64)).collect()),
                    )]),
                    Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "notIn".to_string(),
                        ::prisma_client_rust::PrismaValue::List(value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64)).collect()),
                    )]),
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("lt".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("lte".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("gt".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("gte".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![("not".to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64))]),
                }
            }
        }
    }
}
pub use _prisma::*;
